{
  "Id": "",
  "GameId": "",
  "EntryKey": "scriptfile://c0e2a442-e60d-4472-afc4-df8a458661ce",
  "ContentType": "x-mod/scriptfile",
  "Content": "",
  "Usage": 0,
  "UsePublish": 1,
  "UseService": 0,
  "CoreVersion": "1.25.0.0",
  "StudioVersion": "0.1.0.0",
  "DynamicLoading": 0,
  "ContentProto": {
    "Use": "Json",
    "Json": {
      "Name": "KeyBinding_ReadMe",
      "Id": "c0e2a442-e60d-4472-afc4-df8a458661ce",
      "Script": "--[[\n# Key Binding\nThis package provides functionality for input key bindings and virtual button key bindings.\n\n====================================\n## Usage\n1. Key Binding Setup\nPC Setup\nPressing the \"P\" key will display the UI for setting key bindings. \nFrom this UI, you can change the key bindings by clicking the respective key change button and entering the desired key.\nThe key binding data changed on the client is stored in the database via the server, and the modified key bindings will be applied in subsequent gameplay.\n\nMobile Setup\nOn mobile, the buttons on the screen and the slots are linked, and you can adjust the position and size of the buttons.\nThe position-adjusted buttons are also stored in the database, and the buttons will appear in their changed position in the next gameplay.\n\n2. Virtual Button Window\nOnce the key binding data is retrieved from the database and sent from the server to the client, the PlayerSkillManager on the client will learn four example skills.\nBy pressing the virtual buttons displayed on the screen or pressing the corresponding keyboard keys labeled on the virtual buttons, the skills will be cast.\nAs the skill is cast, a cooldown will be displayed, and the skill cannot be used again until the cooldown expires.\nNote that the SlotDownEvent registered in PlayerSkillManager is connected to InputLogic, not InputService.\n\n====================================\n## Features\n1. Key Binding Changes and Saving\nThe player's key binding data is saved and loaded from PlayerSetting.\nPlayer input does not use InputService directly but passes through the intermediate layer, InputLogic. InputLogic calls the event associated with the slot bound to the inputted keyboard key.\n\n2. Mobile Joystick Size Adjustment Support\nWhen the key binding setup UI for this package is opened on mobile, a window for setting the position of the virtual buttons can be displayed.\nVirtual buttons can be moved, and this data is also saved on the server.\n\n3. Skill Acquisition and Usage\nOnce the player's key binding data is received, the virtual window will display five items: four skills and the jump action. More skills can be used via the keyboard.\nThe Slot events called by InputLogic are received by PlayerSkillManager, which then casts the skills.\n\n====================================\n## Installation\n1. Virtual Button Window UI Path Configuration\nYou need to set the spawn paths for the Virtual Button Window UI.\nThe ParentUIPath can be modified in KeyBindingSampleLogic.\nBy default, it is set to \"/ui/DefaultGroup\".\n\n2. Common Popup UI Path Configuration\nYou need to set the spawn paths for the Common Popup UI.\nThe ParentUIPath can be modified in UIPopupLogic.\nBy default, it is set to \"/ui/PopupGroup\".\n\n3. Player Components\nPlayerSetting\nThis is the component responsible for managing the key binding data.\n\nPlayerControllerComponent\nIn the sample of this package, the existing PlayerControllerComponent is removed to use the PlayerControllerExtend component.\nAfter the game starts, multiple components are added to the player. This process is performed in the UserEnterEvent of KeyBindingSampleLogic.\nThe process of adding components in the User Enter Event of KeyBindingSampleLogic can be skipped by pre-adding them as default components for the player.\n\nPlayerSkillManager\nAfter reading the key binding data from the database, the server sends this data to the client, and the client then sets up the Virtual Button Window and learns the skills.\n\nPlayerDBManager\nThe server-side PlayerSetting that stores the key binding data will save it to the database via PlayerDBManager.\nThe data is saved when PlayerDBManager:OnBeginPlay is triggered or when the player exits the game.\n\n4. Key Binding\n\nThe key bindings for the default keys must be added to InputLogic.DefaultKeyMap, and this is done in KeyBindingSampleLogic:OnBeginPlay.\n\nOn mobile, the UIJoystick is used to set the key binding for movement input, and the UIVirtualButtonWindow is used to set the key binding for skill buttons.\nTo modify the key bindings for skill buttons, you need to handle the slots added in the VirtualButtonWindow model and UIVirtualButtonWindow component.\n\n====================================\n## License\n\nThis project is licensed under the MIT License.\n\nYou are free to use, modify, and distribute this project.\n\nHowever, the software is provided \"as is\", without warranty of any kind.\n\nFor more details, please see the LICENSE.(https://opensource.org/licenses/MIT)\n\n====================================\n## Happy Coding!\n]]",
      "ModifyTime": "09/20/2025 13:13:14"
    }
  }
}