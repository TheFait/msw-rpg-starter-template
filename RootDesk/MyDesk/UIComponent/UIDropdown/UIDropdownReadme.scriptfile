{
  "Id": "",
  "GameId": "",
  "EntryKey": "scriptfile://0dcba9b4-8235-4dc2-91cc-e59840d22874",
  "ContentType": "x-mod/scriptfile",
  "Content": "",
  "Usage": 0,
  "UsePublish": 1,
  "UseService": 0,
  "CoreVersion": "1.25.0.0",
  "StudioVersion": "0.1.0.0",
  "DynamicLoading": 0,
  "ContentProto": {
    "Use": "Json",
    "Json": {
      "Name": "UIDropdownReadme",
      "Id": "0dcba9b4-8235-4dc2-91cc-e59840d22874",
      "Script": "--[[\n# UIDropdown\nThis package provides dropdown UI components.\nIt includes single selection and multi-selection dropdown, making them easy to use.\n\n---\n## Key Features\n\n1. **Diverse Dropdown Type Support**\n   - `UIDropdown`: Basic single selection dropdown\n   - `UIMultiSelectDropdown`: Multi-selection dropdown\n   - `UIDropdownItem`: Dropdown item component\n   - `UIMultiSelectDropdownItem`: Multi-selection dropdown item\n\n2. **Dropdown Direction System**\n   - `UIDropdownDirectionEnum`: Defines dropdown display direction\n   - BOTTOM: Display below\n   - TOP: Display above\n   - CENTER: Display in center\n\n3. **Animations and Visual Effects**\n   - Smooth open/close animations\n   - Visual representation of selection state\n\n---\n## Core Components\n\n### UIDropdown (Base Dropdown)\nThis is the base dropdown component that supports single selection.\n\n**Key Properties:**\n- `Btn`: Dropdown button entity\n- `Item`: Dropdown item template entity\n- `GridView`: GridView to display items\n- `Outline`: Dropdown outline\n- `DataList`: Dropdown data list\n- `SelectedIndex`: Currently selected index\n- `OnRefreshText`: Callback function for customizing item text display\n- `OnRefreshButtonText`: Callback function for customizing button text display\n- `PlaceHolder`: Placeholder text\n- `DropdownDirection`: Dropdown display direction\n- `IsShowAll`: Whether to show all items\n- `UseAnimation`: Whether to use fade in/out animation\n- `AnimationDuration`: Duration of the animation\n\n### UIMultiSelectDropdown (Multi-Selection Dropdown)\nA component that allows selection of multiple items in a dropdown.\n\n**Key Properties:**\n- `Dim`: Entity for background dimming\n- `SelectedIndexTable`: Table of selected indices\n- `SelectedIndexList`: List of selected indices\n- Other properties same as UIDropdown\n\n### UIDropdownItem\nA component for managing individual dropdown items.\n\n**Key Properties:**\n- `Index`: Item index\n- `Data`: Item data\n- `Text`: Text component\n\n### UIDropdownDirectionEnum\nAn enumeration that defines the direction in which the dropdown will be displayed.\n\n**Values:**\n- `BOTTOM = 0`: Display below\n- `TOP = 1`: Display above\n- `CENTER = 2`: Display in center\n\n---\n## Event System\n\n### UIDropdownValueChangedEvent\nTriggered when the selection value of a dropdown changes.\n\n---\n## Usage\n\n### 1. Basic Dropdown Usage\n-- Set data list\nlocal dataList = {{'Item1'}, {'Item2'}, {'Item3'}}\ndropdown:SetDataList(dataList)\n\n### 2. Multi-Selection Dropdown Usage\n-- Set data list\nlocal dataList = {{'Item1'}, {'Item2'}, {'Item3'}}\nmultiDropdown:SetDataList(dataList)\n\n### 3. Custom Text Display with Callbacks\n-- Custom item text display\nlocal dropdown = entity.UIDropdown\ndropdown.OnRefreshText = function(index, textComp)\n    local data = dropdown.DataList[index]\n    if data and data[1] then\n        textComp.Text = data[1]  -- Display first element of data\n    else\n        textComp.Text = \"Item \" .. index\n    end\nend\n\n-- Custom button text display\nlocal dropdown = entity.UIDropdown\ndropdown.OnRefreshButtonText = function(selectedIndex, textComp)\n    if selectedIndex > 0 then\n        local data = dropdown.DataList[selectedIndex]\n        if data and data[1] then\n            textComp.Text = data[1]\n        else\n            textComp.Text = \"Item \" .. selectedIndex\n        end\n    else\n        textComp.Text = dropdown.PlaceHolder\n    end\nend\n\n### 4. Multi-Select Custom Button Text Display\n-- For UIMultiSelectDropdown, button text shows selected items\nlocal multiDropdown = entity.UIMultiSelectDropdown\nmultiDropdown.OnRefreshButtonText = function(selectedIndexList, textComp)\n    if #selectedIndexList == 0 then\n        textComp.Text = multiDropdown.PlaceHolder\n    else\n        local displayTexts = {}\n        for i = 1, #selectedIndexList do\n            local index = selectedIndexList[i]\n            local data = multiDropdown.DataList[index]\n            if data and data[1] then\n                table.insert(displayTexts, data[1])\n            end\n        end\n        textComp.Text = table.concat(displayTexts, \", \")\n    end\nend\n\n---\n## License\n\nThis project is licensed under the MIT License.\nYou are free to use, modify, and distribute this project.\n\nHowever, the software is provided \"as is\", without warranty of any kind.\nFor more details, please see the LICENSE.(https://opensource.org/licenses/MIT)\n\n---\n## Happy Coding!\n]]",
      "ModifyTime": "09/20/2025 12:02:20"
    }
  }
}