@Component
script UICenteredPagination extends UIPagination

	@Description("Use ellipsis for page numbers")
	property boolean UseEllipsis = true

	@Description("Total pages to display")
	property integer TotalPagesToShow = 7

	@Description("Outer pages to show")
	property integer OuterPagesToShow = 1

	@ExecSpace("ClientOnly")
	method void OnPrevClick()
		-- Move one page at a time
		local newPage = self.CurrentPage - 1
		if newPage >= 1 then
			self:SendItemClickedEvent(newPage)
		end
	end

	@ExecSpace("ClientOnly")
	method void OnNextClick()
		-- Move one page at a time
		local newPage = self.CurrentPage + 1
		if newPage <= self.TotalPages then
			self:SendItemClickedEvent(newPage)
		end
	end

	@ExecSpace("ClientOnly")
	method void OnFirstClick()
		self:SendItemClickedEvent(1)
	end

	@ExecSpace("ClientOnly")
	method void OnLastClick()
		self:SendItemClickedEvent(self.TotalPages)
	end

	@ExecSpace("ClientOnly")
	method integer GetOuterPagesToShow()
		-- If ellipsis is not enabled, OuterPagesToShow is 0
		if not self.UseEllipsis then
			return 0
		end
		
		return self.OuterPagesToShow
	end

	@ExecSpace("ClientOnly")
	method void UpdatePageNumberButtons()
		local currentPage = self.CurrentPage
		local totalPages = self.TotalPages
		local totalPagesToShow = self.TotalPagesToShow
		local outerPagesToShow = self:GetOuterPagesToShow()
		
		if currentPage < 1 or totalPages < 1 then
			log_warning("UpdatePageNumberButtons: currentPage or totalPages is less than 1")
			return
		end
		
		if currentPage > totalPages then
			log_warning("UpdatePageNumberButtons: currentPage is greater than totalPages")
			return
		end
		
		-- Calculate pages to show
		local pageList = self:CalculatePagesToShow()
		
		local prevEnabledItemCount = 0
		---@type table<Entity>
		local paginationItems = self.PaginationItems
		for i = 1, #paginationItems do
			local item = paginationItems[i]
			if item.Enable then
				prevEnabledItemCount += 1
			end
		end
		
		local index = 1
		local originalItem = self.Item
		local enabledItemCount = #pageList
		local scrollLayout = self.ScrollLayout
		
		while index <= enabledItemCount do
			local item = paginationItems[index]
			if item == nil then
				item = _SpawnService:SpawnByEntity(originalItem, "Item", Vector3.zero, scrollLayout)
				item.UIPaginationItem:SetParent(self, index)
				paginationItems[index] = item
			else
				item.Enable = true
			end
			
			local pageNumber = pageList[index]
		
			local itemComp = item.UIPaginationItem
			itemComp:SetPageNumber(pageNumber)
			itemComp:SetSelected(false)
			itemComp.Ellipsis = false
			index += 1
		end
		
		-- Disable remaining items
		while index <= #paginationItems do
			local item = paginationItems[index]
			if item ~= nil then
				item.Enable = false
			end
			
			index += 1
		end
		
		self:UpdateEllipsis()
		
		-- Update text
		for i = 1, enabledItemCount do
			local item = paginationItems[i]
			item.UIPaginationItem:UpdateText()
		end
		
		-- Set item selected
		local selectedItem = self:GetSelectedItem()
		if selectedItem ~= nil then
			selectedItem.UIPaginationItem:SetSelected(true)
		end
		
		-- Resize scroll layout if enabled item count is modified
		if prevEnabledItemCount ~= enabledItemCount then
			self:ResizeUI()
		end
	end

	@ExecSpace("ClientOnly")
	method table CalculatePagesToShow()
		local curPage = self.CurrentPage
		local totalPages = self.TotalPages
		local totalPagesToShow = self.TotalPagesToShow
		local outerPagesToShow = self:GetOuterPagesToShow()
		
		local list = {}
		
		-- 1. If total pages are less than pages to show, return all pages in the list
		if totalPages <= totalPagesToShow then
		    for i = 1, totalPages do
		        table.insert(list, i)
		    end
		    return list
		end
		
		local innerPagesToShow = totalPagesToShow - (outerPagesToShow * 2)
		
		-- 2. Add left fixed pages
		for i = 1, outerPagesToShow do
		    table.insert(list, i)
		end
		
		-- 3. Calculate and add center pages
		local innerLeftPages = math.floor(innerPagesToShow / 2)
		local middleStartPage = curPage - innerLeftPages
		
		-- Adjust start page (minimum value)
		-- If center start page overlaps with left fixed page area, start from the next page
		if middleStartPage <= outerPagesToShow then
		    middleStartPage = outerPagesToShow + 1
		end
		
		-- Adjust start page (maximum value)
		-- If center pages encroach on right fixed page area, move start page backward
		local maxMiddleStartPage = totalPages - outerPagesToShow - innerPagesToShow + 1
		if middleStartPage > maxMiddleStartPage then
		    middleStartPage = maxMiddleStartPage
		end
		
		for i = 1, innerPagesToShow do
		    table.insert(list, middleStartPage + i - 1)
		end
		
		-- 4. Add right fixed pages
		for i = 1, outerPagesToShow do
		    table.insert(list, totalPages - outerPagesToShow + i)
		end
		
		return list
	end

	@ExecSpace("ClientOnly")
	method void UpdateEllipsis()
		---@type table<Entity>
		local items = self.PaginationItems
		for i = 1, #items do
			local item = items[i]
			item.UIPaginationItem.Ellipsis = false
		end
		
		if not self.UseEllipsis then
			return
		end
		
		local outerPagesToShow = self:GetOuterPagesToShow()
		
		local leftIndex = outerPagesToShow + 1
		local leftItem = items[leftIndex]
		if leftItem ~= nil then
			local itemComp = leftItem.UIPaginationItem
			local leftEllipsisNumber = outerPagesToShow + 1
			if itemComp ~= nil and leftEllipsisNumber ~= itemComp.PageNumber then
				itemComp.Ellipsis = true
			end
		end
		
		local rightIndex = self.TotalPagesToShow - outerPagesToShow
		local rightItem = items[rightIndex]
		if rightItem ~= nil then
			local itemComp = rightItem.UIPaginationItem
			local rightEllipsisNumber = self.TotalPages - outerPagesToShow
			if itemComp ~= nil and rightEllipsisNumber ~= itemComp.PageNumber then
				itemComp.Ellipsis = true
			end
		end
	end

	@ExecSpace("ClientOnly")
	method void SetUseEllipsis(boolean useEllipsis)
		self.UseEllipsis = useEllipsis
		self:UpdatePagination()
	end

	@ExecSpace("ClientOnly")
	method void SetTotalPagesToShow(integer totalPagesToShow)
		if totalPagesToShow > 0 then
			self.TotalPagesToShow = totalPagesToShow
			self:UpdatePagination()
		end
	end

	@ExecSpace("ClientOnly")
	method void SetOuterPagesToShow(integer outerPagesToShow)
		if outerPagesToShow >= 0 then
			self.OuterPagesToShow = outerPagesToShow
			self:UpdatePagination()
		end
	end

	@ExecSpace("ClientOnly")
	method void ResizeUI()
		self:ResizeScrollLayout()
		
		local entity = self.Entity
		
		local comp = entity.ScrollLayoutGroupComponent
		local paddingLeft = comp.Padding.left
		local paddingRight = comp.Padding.right
		local spacing = comp.Spacing
		
		local childCount = 1 -- 1 is for self.ScrollLayout
		local totalWidth = self.ScrollLayout.UITransformComponent.RectSize.x
		
		local prev = self.Prev
		if prev ~= nil then
			totalWidth += prev.UITransformComponent.RectSize.x
			childCount += 1
		end
		
		local next = self.Next
		if next ~= nil then
			totalWidth += next.UITransformComponent.RectSize.x
			childCount += 1
		end
		
		local first = self.First
		if first ~= nil then
			totalWidth += first.UITransformComponent.RectSize.x
			childCount += 1
		end
		
		local last = self.Last
		if last ~= nil then
			totalWidth += last.UITransformComponent.RectSize.x
			childCount += 1
		end
		
		totalWidth += paddingLeft + paddingRight + (childCount - 1) * spacing
		entity.UITransformComponent.RectSize.x = totalWidth
	end

	@ExecSpace("ClientOnly")
	method void ResizeScrollLayout()
		local pagesToShow = self:CalculatePagesToShow()
		local itemCount = #pagesToShow
		local itemWidth = self.Item.UITransformComponent.RectSize.x
		
		local scrollLayout = self.ScrollLayout
		if scrollLayout == nil then
			return
		end
		
		local comp = scrollLayout.ScrollLayoutGroupComponent
		local padding = comp.Padding.left
		local spacing = comp.Spacing
		
		local totalWidth = itemCount * itemWidth + (itemCount - 1) * spacing + padding
		scrollLayout.UITransformComponent.RectSize.x = totalWidth
	end

end