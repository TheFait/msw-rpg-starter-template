{
  "Id": "",
  "GameId": "",
  "EntryKey": "scriptfile://05ade826-362a-4a75-9827-35907c8caefb",
  "ContentType": "x-mod/scriptfile",
  "Content": "",
  "Usage": 0,
  "UsePublish": 1,
  "UseService": 0,
  "CoreVersion": "1.25.0.0",
  "StudioVersion": "0.1.0.0",
  "DynamicLoading": 0,
  "ContentProto": {
    "Use": "Json",
    "Json": {
      "Name": "UIScrollPickerReadMe",
      "Id": "05ade826-362a-4a75-9827-35907c8caefb",
      "Script": "--[[\n# UIScrollPicker\nThis package provides a scroll picker UI component for selecting values from a scrollable list.\nIt includes smooth scrolling, inertia effects, and customizable appearance for an intuitive user experience.\n\n---\n## Key Features\n\n1. **Smooth Scrolling Interface**\n   - Touch/drag scrolling with momentum\n   - Inertia effects for natural feel\n   - Loop mode support for continuous scrolling\n\n2. **Visual Customization**\n   - Configurable text colors for selected/deselected items\n   - Custom text refresh callback\n   - Adjustable drag sensitivity\n\n---\n## Core Components\n\n### UIScrollPicker\nA scrollable picker component for value selection.\n\n**Key Properties:**\n- `Viewport`: Viewport entity for scrolling area\n- `Item`: Item entity template\n- `IsLoop`: Enable loop mode (99->100->1->2)\n- `DragSensitivity`: Touch/drag sensitivity multiplier\n- `UseInertia`: Enable inertia scrolling\n- `IneritaEaseType`: Inertia easing type (0: QuadEaseOut, 1: Linear)\n- `InertiaDistFactor`: Inertia distance factor\n- `IneritaDurationFactor`: Inertia duration factor\n- `IneritaMaxDist`: Maximum inertia distance\n- `SelectedTextColor`: Color for selected item text\n- `DeselectedTextColor`: Color for deselected item text\n- `OnRefreshText`: Text refresh callback function\n\n### UIScrollRangeNumberPicker\nA scroll picker for numeric value ranges with configurable min/max values and gaps.\n\n**Key Properties:**\n- `MinValue`: Minimum value in the range\n- `MaxValue`: Maximum value in the range\n- `Gap`: Step size between values\n- `RenderPrecision`: Decimal places for display\n- `DataCount`: Total number of values (calculated)\n\n### UIScrollValuePicker\nA scroll picker for custom value lists (strings, objects, etc.).\n\n**Key Properties:**\n- `DataValueList`: Table of custom values to display\n\n### UIScrollPickerItem\nIndividual item component within the scroll picker.\n\n**Key Properties:**\n- `Value`: Item value\n- `Text`: Text component for display\n\n---\n## Event System\n\n### UIScrollPickerValueChangedEvent\nTriggered when the selected value changes.\n\n**Event Properties:**\n- `Value`: New selected value\n- `Index`: New selected index\n\n---\n## Usage\n\n### 1. UIScrollRangeNumberPicker Usage\n-- Set up number range picker\nlocal rangePicker = entity.UIScrollRangeNumberPicker\nrangePicker:SetValueRange(0, 100, 5)  -- Min: 0, Max: 100, Step: 5\n\n-- Configure precision for decimal display\nrangePicker.RenderPrecision = 1  -- Show 1 decimal place\n\n-- Set initial value\nrangePicker:SetValue(25, false)  -- Set to 25, don't send callback\n\n### 2. UIScrollValuePicker Usage\n-- Set up custom value picker\nlocal valuePicker = entity.UIScrollValuePicker\nlocal customValues = {\"Easy\", \"Normal\", \"Hard\", \"Expert\"}\nvaluePicker:SetDataValueList(customValues)\n\n-- Set initial selection\nvaluePicker:SetValue(\"Normal\", false)\n\n### 3. Custom Text Display\n-- Customize text display with callback for range picker\nrangePicker.OnRefreshText = function(item)\n    local comp = item.UIScrollPickerItem\n    local value = comp.Value\n    comp:SetText(string.format(\"%.1f\", value))  -- Display with 1 decimal place\nend\n\n-- Custom text for value picker\nvaluePicker.OnRefreshText = function(item)\n    local comp = item.UIScrollPickerItem\n    local value = comp.Value\n    comp:SetText(\"Level: \" .. value)  -- Add prefix to display\nend\n\n### 4. Loop Mode Configuration\n-- Enable loop mode for continuous scrolling\nrangePicker.IsLoop = true\nvaluePicker.IsLoop = true\n-- When at max value, scrolling continues to min value\n\n### 5. Inertia Settings\n-- Configure inertia behavior\nrangePicker.UseInertia = true\nrangePicker.IneritaEaseType = 0  -- QuadEaseOut\nrangePicker.InertiaDistFactor = 10\nrangePicker.IneritaDurationFactor = 2\nrangePicker.IneritaMaxDist = 1600\n\n### 6. Visual Customization\n-- Set text colors\nrangePicker.SelectedTextColor = Color(1, 0, 0, 1)      -- Red for selected\nrangePicker.DeselectedTextColor = Color(0.5, 0.5, 0.5, 1)  -- Gray for deselected\n\n### 7. Event Handling\n-- Listen for value changes\nentity:ConnectEvent(UIScrollPickerValueChangedEvent, function(evt)\n    print(\"Selected value: \" .. evt.Value)\n    print(\"Selected index: \" .. evt.Index)\nend)\n\n### 8. Programmatic Control\n-- Set value programmatically\nrangePicker:SetValue(25.5, true)  -- Set to 25.5, send callback\nvaluePicker:SetValue(\"Hard\", true)  -- Set to \"Hard\", send callback\n\n-- Get current value\nlocal currentRangeValue = rangePicker:GetValue()\nlocal currentCustomValue = valuePicker:GetValue()\n\n---\n## License\n\nThis project is licensed under the MIT License.\nYou are free to use, modify, and distribute this project.\n\nHowever, the software is provided \"as is\", without warranty of any kind.\nFor more details, please see the LICENSE.(https://opensource.org/licenses/MIT)\n\n---\n## Happy Coding!\n]]",
      "ModifyTime": "09/20/2025 12:02:19"
    }
  }
}