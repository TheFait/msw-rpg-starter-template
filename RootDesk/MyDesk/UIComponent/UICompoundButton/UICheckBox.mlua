@Component
script UICheckBox extends UICompoundButton

	@Description("Check mark sprite component")
	property SpriteGUIRendererComponent Mark = nil

	@Description("Frame sprite component")
	property SpriteGUIRendererComponent Frame = nil

	@Description("First outline sprite component")
	property SpriteGUIRendererComponent Outline1 = nil

	@Description("Second outline sprite component")
	property SpriteGUIRendererComponent OutLine2 = nil

	@Description("Check mark color when active")
	property Color MarkActiveColor = Color(1,1,1,1)

	@Description("Frame color when active")
	property Color FrameActiveColor = Color(1,1,1,1)

	@Description("Frame color when inactive")
	property Color FrameDeactiveColor = Color(1,1,1,1)

	@Description("Outline color when active")
	property Color OutlineActiveColor = Color(1,1,1,1)

	@Description("Outline color when inactive")
	property Color OutlineDeactiveColor = Color(1,1,1,1)

	@Description("Label color when active")
	property Color LabelActiveColor = Color(0,0,0,1)

	@Description("Label color when inactive")
	property Color LabelDeactiveColor = Color(0,0,0,1)

	@Description("Animation tweener")
	@HideFromInspector
	property any Tweener = nil

	@ExecSpace("ClientOnly")
	method void UpdateVisualState(boolean animate)
		__base:UpdateVisualState(animate)
		
		if animate and self.UseAnimation then
			self:AnimateCheckBox(self.IsOn)
		else
			self:SetCheckBox(self.IsOn)
		end
	end

	@ExecSpace("ClientOnly")
	method void AnimateCheckBox(boolean isOn)
		---@type Tweener
		local tweener = self.Tweener
		if isvalid(tweener) and tweener.IsPlaying then
			tweener:Complete()
		end
		
		local duration = self.AnimationDuration
		if isOn then
			tweener = _TweenLogic:MakeTween(0, 1, duration, EaseType.Linear, self.CheckBoxTweenFunc)
		else
			tweener = _TweenLogic:MakeTween(1, 0, duration, EaseType.Linear, self.CheckBoxTweenFunc)
		end
		
		tweener:SetOnEndCallback(self.CheckBoxTweenCallback)
		tweener.AutoDestroy = true
		tweener:Play()
		
		self.Tweener = tweener
	end

	@ExecSpace("ClientOnly")
	method void CheckBoxTweenFunc(number t)
		if not isvalid(self) or not isvalid(self.Entity) then
			return
		end
		
		self:CheckBoxTweenMark(t)
		self:CheckBoxTweenFrame(t)
		self:CheckBoxTweenOutline(t)
		self:CheckBoxTweenLabel(t)
	end

	@ExecSpace("ClientOnly")
	method void CheckBoxTweenMark(number t)
		local mark = self.Mark
		if not isvalid(mark) then
			return
		end
		
		local activeColor = self.MarkActiveColor
		local deactiveColor = activeColor:Clone()
		deactiveColor.a = 0
		
		local targetColor = Color.Lerp(deactiveColor, activeColor, t)
		if not self.Interactable then
			targetColor = self:GetDisabledColor(targetColor)
		end
		
		mark.Color = targetColor
	end

	@ExecSpace("ClientOnly")
	method void CheckBoxTweenFrame(number t)
		local frame = self.Frame
		if not isvalid(frame) then
			return
		end
		
		local targetColor = Color.Lerp(self.FrameDeactiveColor, self.FrameActiveColor, t)
		if not self.Interactable then
			targetColor = self:GetDisabledColor(targetColor)
		end
		
		frame.Color = targetColor
	end

	@ExecSpace("ClientOnly")
	method void CheckBoxTweenOutline(number t)
		local outline1 = self.Outline1
		if isvalid(outline1) then
			local targetColor = Color.Lerp(self.OutlineDeactiveColor, self.OutlineActiveColor, t)
			if not self.Interactable then
				targetColor = self:GetDisabledColor(targetColor)
			end
			outline1.Color = targetColor
		end
		
		local outline2 = self.OutLine2
		if isvalid(outline2) then
			local targetColor = Color.Lerp(self.OutlineDeactiveColor, self.OutlineActiveColor, t)
			if not self.Interactable then
				targetColor = self:GetDisabledColor(targetColor)
			end
			outline2.Color = targetColor
		end
	end

	@ExecSpace("ClientOnly")
	method void CheckBoxTweenLabel(number t)
		local label = self.Label
		if not isvalid(label) then
			return
		end
		
		local targetColor = Color.Lerp(self.LabelDeactiveColor, self.LabelActiveColor, t)
		if not self.Interactable then
			targetColor = self:GetDisabledColor(targetColor)
		end
		
		label.FontColor = targetColor 
	end

	@ExecSpace("ClientOnly")
	method void CheckBoxTweenCallback()
		if isvalid(self) then
			self.Tweener = nil
		end
	end

	@ExecSpace("ClientOnly")
	method void SetCheckBox(boolean isOn)
		---@type Tweener
		local tweener = self.Tweener
		if isvalid(tweener) then
			tweener:Complete()
		end
		
		if isOn then
			self:CheckBoxTweenFunc(1)
		else
			self:CheckBoxTweenFunc(0)
		end
	end

	@ExecSpace("ClientOnly")
	method void SetStyle(string styleName)
		self:SetStyleByStruct(_UICompoundButtonStyleLogic:GetCheckBoxStyle(styleName))
	end

	@ExecSpace("ClientOnly")
	method void SetStyleByStruct(UICheckBoxStyleStruct styleStruct)
		if styleStruct == nil then
			log_warning("Cannot assign nil to a StyleStruct.")
			return
		end
		
		self.UseAnimation = styleStruct.UseAnimation
		self.AnimationDuration = styleStruct.AnimationDuration
		self.SoundRUID = styleStruct.SoundRUID
		self.SoundVolume = styleStruct.SoundVolume
		self.DisabledAlphaValue = styleStruct.DisabledAlphaValue
		
		self.MarkActiveColor = styleStruct.MarkActiveColor
		self.FrameActiveColor = styleStruct.FrameActiveColor
		self.FrameDeactiveColor = styleStruct.FrameDeactiveColor
		self.OutlineActiveColor = styleStruct.OutlineActiveColor
		self.OutlineDeactiveColor = styleStruct.OutlineDeactiveColor
		self.LabelActiveColor = styleStruct.LabelActiveColor
		self.LabelDeactiveColor = styleStruct.LabelDeactiveColor
	end

end