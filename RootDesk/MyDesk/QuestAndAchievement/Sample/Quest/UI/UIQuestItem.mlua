@Component
script UIQuestItem extends Component

	property integer Id = 0

	property Entity Img_Icon = nil

	property Entity Text_Title = nil

	property Entity Text_Desc = nil

	property Entity Text_Progress = nil

	property GridViewComponent GridView = nil

	property Entity Btn_OK = nil

	property Entity Img_Dim = nil

	property table ItemDataTable = {}

	property Entity Panel_Debug = nil

	property Entity Debug_Text_CondIndex = nil

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		local entity = self.Entity
		
		self.Img_Icon = entity:GetChildByName("Img_Icon")
		self.Text_Title = entity:GetChildByName("Text_TItle")
		self.Text_Desc = entity:GetChildByName("Text_Desc")
		self.Text_Progress = entity:GetChildByName("Text_Progress")
		
		local btn_ok = entity:GetChildByName("Btn_OK")
		btn_ok:ConnectEvent(ButtonClickEvent, self.OnClickBtn_OK)
		self.Btn_OK = btn_ok
		 
		local item = entity:GetChildByName("Item_Reward")
		item.Enable = false
		
		local gridView = entity:GetChildByName("GridView_Reward").GridViewComponent
		gridView.ItemEntity = item
		gridView.OnRefresh = self.OnRefresh
		gridView.OnClear = self.OnClear
		
		self.GridView = gridView
		
		self.Img_Dim = entity:GetChildByName("Img_Dim")
		
		if _AdminLogic:IsAdminLocalPlayer() then
			self:Debug_Init()
		end
	end

	@ExecSpace("ClientOnly")
	method void Debug_Init()
		local entity = self.Entity
		local panel_debug = entity:GetChildByName("Panel_Debug")
		self.Panel_Debug = panel_debug
		
		self.Debug_Text_CondIndex = panel_debug:GetChildByName("Text_CondIndex")
		
		local comp = _UserService.LocalPlayer.PlayerQuest
		
		local btn_step_subtract = panel_debug:GetChildByName("Btn_Step_Subtract")
		btn_step_subtract:ConnectEvent(ButtonClickEvent, function()
			comp:Debug_RequestAdjustState(self.Id, false)
		end)
		
		local btn_step_add = panel_debug:GetChildByName("Btn_Step_Add")
		btn_step_add:ConnectEvent(ButtonClickEvent, function()
			comp:Debug_RequestAdjustState(self.Id, true)
		end)
		
		local btn_min = panel_debug:GetChildByName("Btn_Min")
		btn_min:ConnectEvent(ButtonClickEvent, function()
			local index = self:Debug_GetConditionIndex()
			comp:Debug_RequestAdjustValue(self.Id, index, false, true)
		end)
		
		local btn_subtract = panel_debug:GetChildByName("Btn_Subtract")
		btn_subtract:ConnectEvent(ButtonClickEvent, function()
			local index = self:Debug_GetConditionIndex()
			comp:Debug_RequestAdjustValue(self.Id, index, false, false)
		end)
		
		local btn_add = panel_debug:GetChildByName("Btn_Add")
		btn_add:ConnectEvent(ButtonClickEvent, function()
			local index = self:Debug_GetConditionIndex()
			comp:Debug_RequestAdjustValue(self.Id, index, true, false)
		end)
		
		local btn_max = panel_debug:GetChildByName("Btn_Max")
		btn_max:ConnectEvent(ButtonClickEvent, function()
			local index = self:Debug_GetConditionIndex()
			comp:Debug_RequestAdjustValue(self.Id, index, true, true)
		end)
	end

	@ExecSpace("ClientOnly")
	method void Set(UserQuestData userData, boolean isDebug)
		self.Id = userData.Id
		
		local data = _QuestDataSetLogic:GetData(userData.Id)
		if data == nil then
			self:Clear()
			return
		end
		
		local state = userData.State
		local isCompleted = state == _QuestStateEnum.Completed
		
		self.Text_Title.TextComponent.Text = data.Name
		self.Text_Desc.TextComponent.Text = data.Desc
		
		if state == _QuestStateEnum.InProgress then
			self.Text_Desc.TextComponent.Text = data.ProgressingDesc
		end
		
		if state ~= _QuestStateEnum.InProgress and not isCompleted then
			self.Text_Progress.TextComponent.Text = ""
		else
			self.Text_Progress.TextComponent.Text = userData:GetProgressText(data, isCompleted)
		end
		
		local itemDataTable = self.ItemDataTable
		table.clear(itemDataTable)
		
		local rewardItems = data.RewardItems
		if rewardItems == nil then
			rewardItems = {}
		end
		table.initialize(itemDataTable, rewardItems)
		
		local gridView = self.GridView
		gridView.TotalCount = #itemDataTable
		gridView:Refresh(true, true)
		
		local btn_ok = self.Btn_OK
		
		if isCompleted then
			self:SetOKButtonEnable(false)
			btn_ok.TextComponent.Text = string.format("Completed")
		elseif userData:IsCompletable(data) then
			self:SetOKButtonEnable(true)
			btn_ok.TextComponent.Text = string.format("Turn In")
		elseif userData:IsAbandonable(data) then
			self:SetOKButtonEnable(true)
			btn_ok.TextComponent.Text = string.format("Give Up")
		elseif state == _QuestStateEnum.InProgress then
			self:SetOKButtonEnable(false)
			btn_ok.TextComponent.Text = string.format("In Progress")
		else
			local curElapsed = _DateTimeLogic:GetTimeElapsed()
			btn_ok.TextComponent.Text = "Accept"
			
			if userData:IsAcceptable(_UserService.LocalPlayer, data, curElapsed) then
				self:SetOKButtonEnable(true)
			else	
				self:SetOKButtonEnable(false)
			end
		end
		
		self.Img_Dim.Enable = isCompleted
		self.Panel_Debug.Enable = isDebug
	end

	@ExecSpace("ClientOnly")
	method void Clear()
		self.Text_Title.TextComponent.Text = ""
		self.Text_Desc.TextComponent.Text = ""
		self.Text_Progress.TextComponent.Text = ""
		
		table.clear(self.ItemDataTable)
		
		local gridView = self.GridView
		gridView.TotalCount = 0
		gridView:Refresh(true, true)
	end

	@ExecSpace("ClientOnly")
	method void OnClickBtn_OK()
		local id = self.Id
		local userEntity = _UserService.LocalPlayer
		local curElapsed = _DateTimeLogic:GetTimeElapsed()
		
		local playerQuest = userEntity.PlayerQuest
		local userData = playerQuest:GetOrCreateUserData(id)
		if userData == nil then
			return
		end
		
		local data = _QuestDataSetLogic:GetData(id)
		if data == nil then
			return
		end
		
		if userData:IsCompletable(data) then
			playerQuest:RequestCompleteQuests({ id })
		elseif userData:IsAbandonable(data) then
			playerQuest:RequestAbandonQuests({ id })
		elseif userData:IsAcceptable(userEntity, data, curElapsed) then
			playerQuest:RequestAcceptQuests({ id })
		end
	end

	@ExecSpace("ClientOnly")
	method void OnRefresh(integer index, Entity entity)
		index += 1
		
		local itemData = self.ItemDataTable[index]
		local itemId = itemData[1]
		local itemCount = itemData[2]
		
		local spriteComp = entity:GetChildByName("Img_Icon").SpriteGUIRendererComponent
		local textComp = entity:GetChildByName("Text_Num").TextComponent
		
		spriteComp.ImageRUID = "354f7770bded480b98c003aa3e068dc4"
		textComp.Text = tostring(itemCount)
	end

	@ExecSpace("ClientOnly")
	method void OnClear(integer index, Entity entity)
		local spriteComp = entity:GetChildByName("Img_Icon").SpriteGUIRendererComponent
		local textComp = entity:GetChildByName("Text_Num").TextComponent
		
		spriteComp.ImageRUID = ""
		textComp.Text = tostring(0)
	end

	@ExecSpace("ClientOnly")
	method void SetOKButtonEnable(boolean enable)
		local btn_ok = self.Btn_OK
		
		if enable then
			btn_ok.SpriteGUIRendererComponent.ImageRUID = "e4e06f6334ae490b9bf4732b82003c17"
			btn_ok.ButtonComponent.Enable = true
		else
			btn_ok.SpriteGUIRendererComponent.ImageRUID = "976f304c3d3340d49728226e64212ed8"
			btn_ok.ButtonComponent.Enable = false
		end
	end

	@ExecSpace("ClientOnly")
	method integer Debug_GetConditionIndex()
		local text = self.Debug_Text_CondIndex.TextComponent.Text
		local index = math.tointeger(tonumber(text))
		if index <= 0 then
			return nil
		end
		
		local data = _QuestDataSetLogic:GetData(self.Id)
		if data == nil then
			return nil
		end
		
		local conditionCount = data.ConditionCount
		if conditionCount == 0 or conditionCount < index then
			return nil
		end
		
		return index
	end

end