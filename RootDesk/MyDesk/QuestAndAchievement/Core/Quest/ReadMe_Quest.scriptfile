{
  "Id": "",
  "GameId": "",
  "EntryKey": "scriptfile://7a8a2e46-5b7d-467c-9d61-1fb9dde752af",
  "ContentType": "x-mod/scriptfile",
  "Content": "",
  "Usage": 0,
  "UsePublish": 1,
  "UseService": 0,
  "CoreVersion": "1.25.0.0",
  "StudioVersion": "0.1.0.0",
  "DynamicLoading": 0,
  "ContentProto": {
    "Use": "Json",
    "Json": {
      "Name": "ReadMe_Quest",
      "Id": "7a8a2e46-5b7d-467c-9d61-1fb9dde752af",
      "Script": "--[[\n# Quest\nThis package provides common quest features in the game.\n\n=======================================\n## Features\n\n1. Quest Features\nThe quest progress increases based on the user's actions, and rewards can be granted upon completion.\n\nRepeatable quests (daily, weekly, etc.) can be added.\n\nA Quest has the following four states:\n- Init: Initial state. User data is not stored in the database.\n- Progress: Quest is in progress.\n- Completed: Quest has been completed.\n- Stored: Also an initial state, but user data is stored in the database.\n\nQuests can have multiple conditions.\n\nEven if quest data is modified incorrectly, user data is designed to be preserved as much as possible.\n\n2. Quest User Data Management Tool\nAllows viewing and modifying user quest data.\n\n=======================================\n## Recommendation\n\nIt is recommended to set PlayerEntityAuthorityCheck to true in WorldConfig.\nIf this setting is false, the server function is exposed to all clients, which may lead to security vulnerabilities.\n\n=======================================\n## Installation\n\nThis package is available for use after import, but some initial setup is required.\n\n1. The following components need to be added to the DefaultPlayer.\n- PlayerDBManager, PlayerData, PlayerAchievement, PlayerQuest\n\n2. Admin Permissions Check for Tool Usage\nYou need to check if the user has admin permissions using the Util:IsAdmin function.\n\n3. UI Path Configuration\nYou need to set the spawn paths for the message UI and the tool UI.\nThe ParentUIPath and ParentUIToolPath can be modified in QuestSampleLogic.\nBy default, they are set to \"/ui/DefaultGroup\".\n\n4. DataStorage Name Configuration\nThe name you are using might overlap with existing ones.\nYou can modify the StorageName in GMQuestToolLogic.\n\n5. UIHUD\nYou can use the UIHUD model to conduct achievement tests.\n\n=======================================\n## Usage\n\nPress the F3 key to open the UI, where you can view quest progress and modify user data through the debug interface.\n\nYou can configure quest data in QuestDataSet and QuestConditionDataSet.\n\n=======================================\n## Tool Usage\nYou can open the tool UI using the F4 key, which allows you to manage the user quest data.\n\nThe start and end dates are stored and used in UTC time in the DataStorage.\n\nYou can set the time offset for your region using the \"User Time Offset\" option in the top-left corner of the tool.\nYou can retrieve and input data based on this time setting.\nIt does not affect the already stored date data.\n\nUser data should be safely modified only when the user is offline.\n\n=======================================\n## Action Event and Condition\n\nAchievements and quests process progress values by receiving ActionEvent through ActionCondition.\n\nDefine the desired Action in ActionEnum in advance, then create an ActionEvent and send it to UserEntity.\n\nPredefine the desired ActionCondition in ActionConditionEnum.\nInherit from ActionConditionData, add a new ActionConditionData, and implement it by overriding the necessary functions.\nThe `GetActionEnumList` functions must be implemented.\n\nImplements the 'Check' function and 'GetNextUserValue' function to verify whether the actionEvent is valid and to return the updated UserValue.\n\nSome conditions may require the values to be updated when a quest is accepted or when the user logs in.\nIn such cases, implement the IsUpdateNeeded and GetUpdatedValue functions.\n\n=======================================\n## Data Structure\n\n=======================================\n### QuestData\n\nId : Integer\n\nName : Name\nDesc : Description\nProgressingDesc : The description when the state is Progress\n\nCategoryEnum : CategoryEnum\n\nIsRepeatable : Indicates whether this quest is repeatable.\n\nCycleEnum : Setting CycleEnum resets quests based on the reference time.\nThe reference time is configured using BaseHour and BaseDayOfWeek in DateTimeLogic.\n\nLinkedPrevId : ID of the prerequisite quest required to start this quest.\nThis quest will not appear in the list unless the quest with this ID is completed.\n\nRequiredId : ID of the prerequisite quest required to start this quest.\n\nAutoAccept : If the quest is available for acceptance, it will be accepted automatically.\n\nCannotAbandon : Prevents the quest from being abandoned.\n\nRewardItems : Reward Items. Uses ,| as the separator.\n\"itemId1,count1|itemId2,count2...\"\n\nPriority : Sorted and displayed according to the following rules.\n- State (Progress > CanAccept > Others > Completed)\n- Priority (ascending)\n- Id (ascending)\n\nDisable : This data will not be loaded.\n\n=======================================\n### QuestConditionData\n\nId : Quest Id\n\nDescription : Condition Description\n\nCondEnum, CondArg, CondExtra : Enter the ActionCondition settings that correspond to the quest progress conditions.\n\nValue : Quest Condition Integer Value. \n\nDisable : This data will not be loaded.\n\n=======================================\n## License\n\nThis project is licensed under the MIT License.\nYou are free to use, modify, and distribute this project.\n\nHowever, the software is provided \"as is\", without warranty of any kind.\nFor more details, please see the LICENSE.(https://opensource.org/licenses/MIT)\n\n=======================================\n## Happy Coding!\n]]",
      "ModifyTime": "10/01/2025 14:23:44"
    }
  }
}