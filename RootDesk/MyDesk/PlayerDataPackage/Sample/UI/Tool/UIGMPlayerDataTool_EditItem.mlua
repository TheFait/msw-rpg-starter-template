@Component
script UIGMPlayerDataTool_EditItem extends Component

	property TextComponent Level = nil

	property TextComponent Dia = nil

	property TextComponent Meso = nil

	property TextComponent FirstLoginTime = nil

	property TextComponent LastUpdateTime = nil

	property TextComponent Extra = nil

	property any Data = nil

	property integer TimeOffset = 0

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		local entity = self.Entity
		
		self.Level = entity:GetChildByName("Text_Level").TextComponent
		self.Dia = entity:GetChildByName("Text_Dia").TextComponent
		self.Meso = entity:GetChildByName("Text_Meso").TextComponent
		self.FirstLoginTime = entity:GetChildByName("Text_FirstLoginTime").TextComponent
		self.FirstLoginTime.Entity:ConnectEvent(TextInputEndEditEvent, self.OnEndEdit_FirstLoginTime)
		self.LastUpdateTime = entity:GetChildByName("Text_LastUpdateTime").TextComponent
		self.LastUpdateTime.Entity:ConnectEvent(TextInputEndEditEvent, self.OnEndEdit_LastUpdateTime)
		self.Extra = entity:GetChildByName("Text_Extra").TextComponent
	end

	@ExecSpace("ClientOnly")
	method void Set(PlayerBasicInfo s, integer timeOffset)
		self.Data = s
		self.TimeOffset = timeOffset
		
		self.Level.Text = tostring(s.Level)
		self.Dia.Text = tostring(s.Dia)
		self.Meso.Text = tostring(s.Meso)
		self.FirstLoginTime.Text = _UtilGMTool:ElapsedTimeToString(s.FirstLoginTime, timeOffset)
		self.LastUpdateTime.Text = _UtilGMTool:ElapsedTimeToString(s.LastUpdateTime, timeOffset)
		self.Extra.Text = s.Extra
	end

	@ExecSpace("ClientOnly")
	method PlayerBasicInfo Get()
		---@type PlayerBasicInfo
		local data = self.Data
		if data == nil then
			return nil
		end
		
		local level = math.tointeger(tonumber(self.Level.Text))
		if level == nil then
			log_error("Level is invalid.")
			return nil
		end
		data.Level = level
		
		local dia = math.tointeger(tonumber(self.Dia.Text))
		if dia == nil then
			log_error("Level is invalid.")
			return nil
		end
		data.Dia = dia
		
		local meso = math.tointeger(tonumber(self.Meso.Text))
		if meso == nil then
			log_error("Meso is invalid.")
			return nil
		end
		data.Meso = meso
		
		local timeOffset = self.TimeOffset
		data.FirstLoginTime = _UtilGMTool:StringToElapsedTime(self.FirstLoginTime.Text, timeOffset)
		data.LastUpdateTime = _UtilGMTool:StringToElapsedTime(self.LastUpdateTime.Text, timeOffset)
		data.Extra = self.Extra.Text
		
		return data
	end

	@ExecSpace("ClientOnly")
	method void Invalidate(integer timeOffset)
		self.TimeOffset = timeOffset
		
		---@type PlayerBasicInfo
		local data = self.Data
		if data == nil then
			return
		end
		
		self.FirstLoginTime.Text = _UtilGMTool:ElapsedTimeToString(data.FirstLoginTime, timeOffset)
		self.LastUpdateTime.Text = _UtilGMTool:ElapsedTimeToString(data.LastUpdateTime, timeOffset)
	end

	@ExecSpace("ClientOnly")
	method void Clear()
		self.Data = nil
		
		self.Level.Text = ""
		self.Dia.Text = ""
		self.Meso.Text = ""
		self.FirstLoginTime.Text = ""
		self.LastUpdateTime.Text = ""
		self.Extra.Text = ""
	end

	@ExecSpace("ClientOnly")
	method void OnEndEdit_FirstLoginTime(TextInputEndEditEvent evt)
		---@type PlayerBasicInfo
		local data = self.Data
		if data == nil then
			return
		end
		
		local success, result = pcall(function()
			data.FirstLoginTime = _UtilGMTool:StringToElapsedTime(self.FirstLoginTime.Text, self.TimeOffset)
		end)
		
		-- Rollback Text
		if not success then
			local prevStr = _UtilGMTool:ElapsedTimeToString(data.FirstLoginTime, self.TimeOffset)
			self.FirstLoginTime.Entity.TextInputComponent.Text = prevStr
		end
	end

	@ExecSpace("ClientOnly")
	method void OnEndEdit_LastUpdateTime(TextInputEndEditEvent evt)
		---@type PlayerBasicInfo
		local data = self.Data
		if data == nil then
			return
		end
		
		local success, result = pcall(function()
			data.LastUpdateTime = _UtilGMTool:StringToElapsedTime(self.LastUpdateTime.Text, self.TimeOffset)
		end)
		
		-- Rollback Text
		if not success then
			local prevStr = _UtilGMTool:ElapsedTimeToString(data.LastUpdateTime, self.TimeOffset)
			self.LastUpdateTime.Entity.TextInputComponent.Text = prevStr
			return
		end
	end

end