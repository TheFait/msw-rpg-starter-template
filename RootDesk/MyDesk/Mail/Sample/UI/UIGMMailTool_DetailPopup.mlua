@Component
script UIGMMailTool_DetailPopup extends Component

	property Entity Text_Title = nil

	property Entity Text_Message = nil

	property Entity Text_Sender = nil

	property Entity Text_RetentionDays = nil

	property Entity Text_StartDate = nil

	property Entity Text_EndDate = nil

	property Entity Text_DueDate = nil

	property Entity Text_IsRead = nil

	property GridViewComponent GridView = nil

	property Entity ItemUI = nil

	property Entity PlayerMailUI = nil

	property table Items = {}

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		local entity = self.Entity
		
		local panel = entity:GetChildByName("Panel")
		local page = panel:GetChildByName("Page")
		
		local item = page:GetChildByName("Item")
		self.Text_Title = item:GetChildByName("Text_Title")
		self.Text_Message = item:GetChildByName("Text_Message")
		self.Text_Sender = item:GetChildByName("Text_Sender")
		self.Text_RetentionDays = item:GetChildByName("Text_RetentionDays")
		self.Text_StartDate = item:GetChildByName("Text_StartDate")
		self.Text_EndDate = item:GetChildByName("Text_EndDate")
		self.GridView = item:GetChildByName("GridView").GridViewComponent
		
		local itemUI = item:GetChildByName("ItemUI")
		self.GridView.ItemEntity = itemUI
		self.GridView.OnRefresh = self.OnRefresh
		self.GridView.OnClear = self.OnClear
		
		self.PlayerMailUI = page:GetChildByName("PlayerAddData")
		self.Text_DueDate = self.PlayerMailUI:GetChildByName("Text_DueDate")
		self.Text_IsRead = self.PlayerMailUI:GetChildByName("Text_IsRead")
		
		local title = panel:GetChildByName("Title")
		local btnClose = title:GetChildByName("Btn_Exit")
		btnClose:ConnectEvent(ButtonClickEvent, function(evt) self.Entity:SetEnable(false) end)
	end

	@ExecSpace("ClientOnly")
	method void Open(MailBase m, integer timeOffset, string userId)
		self.Text_Title.TextComponent.Text = m.Title
		self.Text_Message.TextComponent.Text = m.Message
		self.Text_Sender.TextComponent.Text = m.Sender
		self.Text_RetentionDays.TextComponent.Text = tostring(m.RetentionDays)
		
		local hourElapsed = 60 * 60 * 1000
		local offsetElapsed = timeOffset * hourElapsed
		self.Text_StartDate.TextComponent.Text = DateTime(m.StartDate + offsetElapsed):ToFormattedString("yyyy-MM-dd HH:mm:ss")
		self.Text_EndDate.TextComponent.Text = DateTime(m.EndDate + offsetElapsed):ToFormattedString("yyyy-MM-dd HH:mm:ss")
		
		self.Items = m.Items
		self.GridView.TotalCount = #self.Items
		self.GridView:Refresh(true, true)
		
		if _Util:IsNilorEmptyString(userId) then
			self.PlayerMailUI:SetEnable(false)
		else
			---@type Mail
			local mail = m
			self.PlayerMailUI:SetEnable(true)
			
			local dueDate = mail.DueDate or 0
			self.Text_DueDate.TextComponent.Text = "만료일 : "..DateTime(dueDate + offsetElapsed):ToFormattedString("yyyy-MM-dd HH:mm:ss")
			
			if mail.IsRead then
				self.Text_IsRead.TextComponent.Text = "읽음 여부 : O"
			else
				self.Text_IsRead.TextComponent.Text = "읽음 여부 : X"		
			end
		end
		
		self.Entity:SetEnable(true)
	end

	@ExecSpace("ClientOnly")
	method void OnRefresh(integer index, Entity entity)
		index += 1
		---@type ItemBase
		local item = self.Items[index]
		entity.UIGMMailTool_ItemInfo:Apply(item, index, nil)
	end

	@ExecSpace("ClientOnly")
	method void OnClear(integer index, Entity entity)
		entity.UIGMMailTool_ItemInfo:Clear()
	end

end