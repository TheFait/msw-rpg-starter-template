@Logic
script RankingConfigDataSetLogic extends Logic

	property table DataTable = {}

	method boolean Load()
		---@type table<integer, RankingConfigData>
		local dataTable = self.DataTable
		
		local getBaseTimeFunc = function(row, cycleEnum)
			local releaseBaseTimeStr = row:GetItem("ReleaseBaseTime")
			if _Util:IsNilorEmptyString(releaseBaseTimeStr) then
				return nil
			end
			
			local elapsed = DateTime(releaseBaseTimeStr).Elapsed
			local baseTime = _DateTimeLogic:GetNextCycleBaseTime(cycleEnum, elapsed - 1)	
			if baseTime == DateTime.MaxValue.Elapsed then
				return nil
			end
			
			return baseTime
		end
		
		local rows = _DataService:GetTable("RankingConfigDataSet"):GetAllRow()
		for i = 1, #rows do
			local row = rows[i]
			local disable = row:GetItem("Disable")
			if not _Util:IsNilorEmptyString(disable) then
				continue
			end
			
			local data = RankingConfigData()
			if not data:Load(row) then
				return false
			end
			
			local id = data.Id
			local cycleEnum = data.CycleEnum
			if cycleEnum ~= _CycleEnum.None then
				local success, result = pcall(getBaseTimeFunc, row, cycleEnum)
				if not success then
					log_error(string.format("The releaseBaseTime is not valid. Id : %d. Result : %s", id, result))
					return false
				end
				
				if result == nil then
					log_error(string.format("The releaseBaseTime is not valid. Id : %d", id))
					return false
				end
				
				data.ReleaseBaseTime = result
			end
			
			if dataTable[id] ~= nil then
				log_error(string.format("Id already exists. Id : %d", id))
				return false
			end
			
			dataTable[id] = data
		end
		
		-- Key duplication check
		local keyNameTable = {}
		for id, data in pairs(dataTable) do
			local key = data.Key
			if keyNameTable[key] ~= nil then
				log_error(string.format("Key already exists. Id : %d, Key : %s", id, key))
				return false
			end
			
			keyNameTable[key] = true
		end
		
		return true
	end

	method RankingConfigData GetData(integer id)
		return self.DataTable[id]
	end

end