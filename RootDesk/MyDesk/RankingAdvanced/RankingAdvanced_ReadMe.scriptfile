{
  "Id": "",
  "GameId": "",
  "EntryKey": "scriptfile://bfc2bf56-f44d-47c7-95ea-9dab4724810d",
  "ContentType": "x-mod/scriptfile",
  "Content": "",
  "Usage": 0,
  "UsePublish": 1,
  "UseService": 0,
  "CoreVersion": "1.25.0.0",
  "StudioVersion": "0.1.0.0",
  "DynamicLoading": 0,
  "ContentProto": {
    "Use": "Json",
    "Json": {
      "Name": "RankingAdvanced_ReadMe",
      "Id": "bfc2bf56-f44d-47c7-95ea-9dab4724810d",
      "Script": "--[[\n# Ranking(Advanced)\nThis package provides a ranking feature, allowing creators to display ranking to users.\n\n=======================================\n## Features\n\n1. Ranking Features\n\nMultiple rankings can be configured through DataSet.\n\nData required for rankings can be stored and accessed via SortableDataStorage and UserDataStorage.\n\n2. Ranking UI\n\nA ranking UI is provided to display the current ranking data to players.\n\nPrevious rankings are not accessible or viewable through the ranking UI.\n\n3. Ranking Data Management Tool\n\nAllows viewing and modifying ranking data and user data.\n\n4. Score-Based Previous Ranking Rewards\n\nRewards can be distributed based on the scores from the previous ranking.\n\nRankings without a defined cycle (e.g., Day, Week) cannot distribute rewards.\n\n=======================================\n## Recommendation\n\nIt is recommended to set PlayerEntityAuthorityCheck to true in WorldConfig.\nIf this setting is false, the server function is exposed to all clients, which may lead to security vulnerabilities.\n\n=======================================\n## Installation\n\nThis package is available for use after import, but some initial setup is required.\n\n1. The following components need to be added to the DefaultPlayer.\n- PlayerDBManager, PlayerRanking\n\n2. Admin Permissions Check for Tool Usage\nYou need to check if the user has admin permissions using the AdminLogic:IsAdmin function.\n\n3. UI Path Configuration\nYou need to set the spawn paths for the message UI and the tool UI.\nThe UIPath, UIToolPath, UIHUDPath can be modified in RankingSampleUILogic.\nBy default, they are set to \"/ui/DefaultGroup\".\n\n4. DataStorage Name Configuration\nThe names and tags you are using might overlap with existing ones.\nYou can modify the StorageName in RankingDataStorageLogic.\n\n5. Ranking Config Settings\nMultiple rankings can be configured and managed through RankingConfigDataSet.\n\n6. UIHUD\nYou can use the UIHUD model to conduct ranking registration tests.\n\n=======================================\n## Usage\n\nPress the 6 key to open the HUD UI, where player can register ranking.\n\nIf the Force checkbox is selected, the score will be updated regardless of whether it is lower than or equal to the existing score.\n\nPress the 7 key to open the UI, where player can view ranking.\n\n1. Force Update Button\n\nAllows administrators to manually update the SharedMemory, ensuring that the ranking data is synchronized immediately.\n\n2. View Past Record Button\n\nEnables players to view their previous rankings.\n\nRewards can be claimed based on the scores from past rankings.\n\n=======================================\n## Tool Usage\n\nYou can open the tool UI using the 8 key, which allows you to manage the ranking data and user data.\n\nYou can set the time offset for your region using the \"User Time Offset\" option in the top-left corner of the tool.\nYou can retrieve and input data based on this time setting.\nIt does not affect the already stored date data.\n\nUser data should be safely modified only when the user is offline.\n\n### View\nRetrieve ranking data from SortableStorage using the following parameters:\n\nid: The unique identifier for the ranking\n\ncycleIndex: The target cycle index\n\nitemCount: The number of ranking entries to retrieve\n\n### Edit ViewData\nView and edit ranking data in SortableStorage.\nData can be set after a query operation using the following parameters.\n\nid: The unique identifier for the ranking\n\ncycleIndex: The target cycle index\n\nProfileCode: The profile code to update\n\nYou can modify the following data fields:\n\nScore: Ranking score.\n\nTag: A string that can be defined by the creator. By default, the nickname is stored.\n\n### Edit UserData\nView and edit UserRankingData in UserDataStorage.\nData can be set after a query operation using the profileCode.\n\nYou can modify the following data fields:\n\nId: Ranking ID.\n\nCycleIndex: Ranking cycle index.\n\nScore: Ranking score, which is used for reward distribution.\n\nUpdateTime: The date when the ranking was last updated.\n\nRewardTime: The date when the reward was claimed. If the value is 0, the reward has not been claimed.\n\nExtra: A custom string that can be defined by the creator.\n\n=======================================\n## Ranking Data Structure\n\nPlayerRanking:SetScoreAndWait function is used to register rankings.\n\nDuring this process, required information can be stored in both SortableDataStorage and UserDataStorage.\n\n1. SortableDataStorage & RankingData Struct\n\nSortableDataStorage holds information required for displaying rankings (stored in the RankingData Struct).\n\nTo store more detailed information, Tags are used.\n\n2. UserDataStorage & UserRankingData Struct\n\nUserDataStorage contains more detailed ranking data.\n\nThis data is used as the basis for distributing score-based rewards.\n\n=======================================\n## Shared Ranking Data Generation and Sharing Structure\n\n1. Data Generation\n\nA single world instance accesses SortableDataStorage to generate ranking data.\n\nThe generated ranking data is then stored in WorldInstanceSharedMemory.\n\nThe system does not generate rankings for previous CycleIndex values.\n\n2. Data Sharing\n\nOther world instances do not access SortableDataStorage directly but refer to the data stored in WorldInstanceSharedMemory.\n\nSince each world instance has a different update interval, the ranking data is not updated in real-time.\n\n3. Data Accuracy\n\nDue to the varying update intervals of each instance, the ranking data in WorldInstanceSharedMemory may not always reflect the most current state.\n\nTherefore, it is not suitable to use this package for accurate rank-based rewards. Instead, score-based rewards are supported.\n\n=======================================\n## Ranking Config DataSet\n\nId : A unique integer id.\n\nKey : The keyName in DataStorage must be unique.\nIt should not conflict with keys used by other rankings or names of other DataStorage instances.\n\nName : A simple name used for identification purposes.\n\nCycleEnum : This allows you to set the ranking cycle. (Day, Week, Month, Year...)\nIf not provided, the ranking cycle will not exist.\n\nViewCount: The maximum number of users displayed in the ranking UI.\nDue to the DataStorage Credit usage limit, the ViewCount can only be set up to 1000.\n\nRefreshIntervalMinutes: The interval (in minutes) at which the SharedMemory is refreshed.\n\nHasReward: Indicates whether score-based rewards are distributed.\n\nRankModeEnum: The method used to calculate rankings (Index, Rank, DenseRank).\n\nMaxUserDataCount: The maximum number of user data entries to retain.\nWhen the limit is exceeded, older user data will be deleted first when loading.\n\nReleaseBaseTime: Specifies the release date of the ranking.\nThe CycleIndex is calculated based on this date, so it should not be changed arbitrarily.\nThe cycle reference time can be set using BaseDayOfWeek and BaseHour in DateTimeLogic.\n\nDisable : This data will not be loaded.\n=======================================\n## Cautions\n\n### DataStorage Credit\nExcessive use of DataStorage Credit may occur.\nTherefore, it is necessary to adjust the values in the RankingConfigDataSet to maintain appropriate Credit usage.\n\n1. Number of active rankings\n2. ViewCount\n3. RefreshIntervalMinutes\n\n### RankingData Tag\nRanking data is stored in a single shared variable, with a maximum size limit of 80,000 bytes.\nTo avoid exceeding this limit, the length of Tags is restricted.\n\nSince | is used as a delimiter in SharedMemory, it must not be included in Tags.\n\n### Instance Room\nUser ranking queries are not available in the instance room.\nHowever, players can still register rankings and view their own records.\n\n=======================================\n## License\n\nThis project is licensed under the MIT License.\nYou are free to use, modify, and distribute this project.\n\nHowever, the software is provided \"as is\", without warranty of any kind.\nFor more details, please see the LICENSE.(https://opensource.org/licenses/MIT)\n\n=======================================\n## Happy Coding!\n]]\n",
      "ModifyTime": "10/01/2025 14:56:43"
    }
  }
}