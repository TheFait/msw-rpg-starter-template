@Logic
script DateTimeLogic extends Logic

	property integer ServerTimeOffset = 0

	property integer BaseHour = 3

	property integer BaseDayOfWeek = 4

	method integer GetTimeElapsed()
		return DateTime.UtcNow.Elapsed + self.ServerTimeOffset
	end

	method any GetLocalDateTime()
		return _UtilLogic:GetLocalTimeFrom(DateTime(self:GetTimeElapsed()))
	end

	@ExecSpace("ServerOnly")
	method void SetServerTimeOffset(integer serverTimeOffset)
		self.ServerTimeOffset = serverTimeOffset
		
		local timeStr = self:GetDateTime():ToFormattedString("yyyy-MM-dd HH:mm:ss")
		log("ServerTime Changed. " .. timeStr)
		
		local event = ServerTimeOffsetChangedEvent()
		event.ServerTimeOffset = serverTimeOffset
		
		self:SendEvent(event)
		self:SendEventToClient(event)
	end

	@ExecSpace("Client")
	method void SendEventToClient(ServerTimeOffsetChangedEvent event)
		self.ServerTimeOffset = event.ServerTimeOffset
		self:SendEvent(event)
	end

	@ExecSpace("ServerOnly")
	method void SetServerTime(integer utcTimeElapsed)
		local timeOffset = utcTimeElapsed - DateTime.UtcNow.Elapsed
		self:SetServerTimeOffset(timeOffset)
	end

	@ExecSpace("ServerOnly")
	method void AddServerTimeOffset(integer elapsed)
		local timeOffset = self.ServerTimeOffset + elapsed
		self:SetServerTimeOffset(timeOffset)
	end

	@ExecSpace("ServerOnly")
	method void ResetServerTimeOffset()
		self:SetServerTimeOffset(0)
	end

	method any GetDateTime()
		return DateTime(self:GetTimeElapsed())
	end

	method integer GetMillisecondsFromDays(integer day)
		return (day * 24 * 60 * 60 * 1000)
	end

	method integer GetElapsedFromDateString(string dateTimeStr)
		if _Util:IsNilorEmptyString(dateTimeStr) then
			return 0
		end
		
		return DateTime(dateTimeStr).Elapsed
	end

	method integer GetNextCycleBaseTime(integer cycleEnum, integer elapsed)
		-- CycleEnum에 해당하는 Elapsed 이후의 BaseTime을 구한다.
		if elapsed == nil or elapsed < 0 then
			return DateTime.MaxValue.Elapsed
		end
		
		local dateTime = DateTime(elapsed)
		
		if cycleEnum == _CycleEnum.Day then
			local baseTime = self:GetBaseTime(dateTime.Year, dateTime.Month, dateTime.Day)
			if elapsed < baseTime then
				return baseTime
			end
			
			local elapsedDay = 86400000
			return baseTime + elapsedDay
		end
		
		if cycleEnum == _CycleEnum.Week then
			local resetDayOfWeek = _DayOfWeekEnum:ToInteger(dateTime.DayOfWeek)
			local dayOffset = self.BaseDayOfWeek - resetDayOfWeek
			
			local elapsedDay = 86400000
			local targetDateTime = DateTime(elapsed + dayOffset * elapsedDay)
			
			local baseTime = self:GetBaseTime(targetDateTime.Year, targetDateTime.Month, targetDateTime.Day)
			if elapsed < baseTime then
				return baseTime
			end
			
			return baseTime + elapsedDay * 7
		end
		
		if cycleEnum == _CycleEnum.Month then
			local year = dateTime.Year
			local month = dateTime.Month
			
			local baseTime = self:GetBaseTime(year, month, 1)
			if elapsed < baseTime then
				return baseTime
			end
			
			if month == 12 then
				year += 1
				month = 1
			end
			
			return self:GetBaseTime(year, month, 1)
		end
		
		if cycleEnum == _CycleEnum.Year then
			local year = dateTime.Year
			local month = dateTime.Month
			
			local baseTime = self:GetBaseTime(year, month, 1)
			if elapsed < baseTime then
				return baseTime
			end
			
			return self:GetBaseTime(year + 1, month, 1)
		end
		
		return DateTime.MaxValue.Elapsed
	end

	method integer GetBaseTime(integer year, integer month, integer day)
		local resetDateTime = DateTime(year, month, day, _DateTimeLogic.BaseHour, 0, 0)
		return resetDateTime.Elapsed
	end

end