@Component
script UIGMMessageTool_View extends Component

	property UIGMMessageTool Parent = nil

	property GridViewComponent GridViewComp = nil

	property Entity Item = nil

	property table DataTable = {}

	property any SortFunc = nil

	property integer UserTimeOffset = 0

	@ExecSpace("ClientOnly")
	method void OnBeginPlay()
		local entity = self.Entity
		
		local item = entity:GetChildByName("Item")
		self.Item = item
		
		local gridViewComp = entity:GetChildByName("GridView").GridViewComponent
		gridViewComp.ItemEntity = item
		gridViewComp.OnRefresh = self.OnRefresh
		gridViewComp.OnClear = self.OnClear
		self.GridViewComp = gridViewComp
		
		---@param a GMMessageStruct
		---@param b GMMessageStruct
		local function sortFunc(a, b)
			return a.Id < b.Id
		end
		self.SortFunc = sortFunc
		
		local btn_refresh = entity:GetChildByName("Btn_Refresh")
		btn_refresh:ConnectEvent(ButtonClickEvent, self.OnClickBtn_Refresh)
	end

	@ExecSpace("ClientOnly")
	method void SetDataTable(table dataTable)
		table.sort(dataTable, self.SortFunc)
		
		self.UserTimeOffset = self.Parent.UserTimeOffset
		self.DataTable = dataTable
		self.GridViewComp.TotalCount = #dataTable
		self.GridViewComp:Refresh(true, true)
	end

	@ExecSpace("ClientOnly")
	method void OnRefresh(integer index, Entity entity)
		index += 1
		local s = self.DataTable[index]
		entity.UIGMMessageTool_ViewItem:Set(s, self.UserTimeOffset)
	end

	@ExecSpace("ClientOnly")
	method void OnClear(integer index, Entity entity)
		entity.UIGMMessageTool_ViewItem:Clear()
	end

	@ExecSpace("ClientOnly")
	method void Invalidate()
		self.UserTimeOffset = self.Parent.UserTimeOffset
		self.GridViewComp:Refresh(true, true)
	end

	@ExecSpace("ClientOnly")
	method void OnClickBtn_Refresh()
		_GMMessageLogic:RequestOpenUITool()
	end

end