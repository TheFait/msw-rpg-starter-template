@Struct
script ItemStruct

	property string GUID = ""

	property integer ItemId = 0

	property integer Count = 0

	property integer EndDateMinute = 0

	property boolean Lock = false

	property any ItemGearStruct = nil

	property integer CreateDateTimeSec = 0

	method void CopyFrom(ItemStruct other)
		self.GUID = other.GUID
		self.ItemId = other.ItemId
		self.Count = other.Count
		self.EndDateMinute = other.EndDateMinute
		self.Lock = other.Lock
		self.CreateDateTimeSec = other.CreateDateTimeSec
		
		---@type ItemGearStruct
		local gearStruct = self.ItemGearStruct
		local otherGearStruct = other:GetGearStruct()
		if otherGearStruct == nil then
			self.ItemGearStruct = nil
		else
			if gearStruct == nil then
				self.ItemGearStruct = otherGearStruct:Clone()	
			else
				gearStruct:CopyFrom(otherGearStruct)	
			end
		end
	end

	method boolean Deserialize(table dbItem)
		--[[
			dbItem Table Structure
			{
				'S' : "Guid,ItemId,Count,Lock,EndDate"
				'G' : Grade
			}
		]]
		if self:Deserialize_Item(dbItem) == false then
			return false
		end
		self:Deserialize_Equip(dbItem)
		return true
	end

	method boolean Deserialize_Item(table dbItem)
		local str = dbItem['S']
		local strs = _UtilLogic:Split(str, ',')
		
		self.GUID = strs[1]
		if self.GUID == nil then
			self.GUID = ''
		end
		self.ItemId = math.tointeger(tonumber(strs[2]))
		if self.ItemId == nil then
			self.ItemId = 0
		end
		self.Count = math.tointeger(tonumber(strs[3]))
		if self.Count == nil then
			self.Count = 0
		end
		
		self.EndDateMinute = math.tointeger(tonumber(strs[4]))
		if self.EndDateMinute == nil then
			self.EndDateMinute = 0
		end
		
		self.CreateDateTimeSec = math.tointeger(tonumber(strs[5]))
		if self.CreateDateTimeSec == nil then
			self.CreateDateTimeSec = 0
		end
		
		if strs[6] == "1" then
			self.Lock = true
		end
		
		return true
	end

	method void Deserialize_Equip(table dbItem)
		local isGearItem = false
		local isCostumeGearItem = false
		
		local itemData = _ItemDataLogic:GetData(self.ItemId)
		if itemData ~= nil then
			isGearItem = (itemData.Category == _ItemCategoryEnum.Gear)
		end
		
		---@type ItemGearStruct
		local itemGearStruct = ItemGearStruct()
		local hasDBData = itemGearStruct:Deserialize(dbItem)
		if isGearItem or hasDBData then
			self.ItemGearStruct = itemGearStruct
		end
	end

	method void Serialize(table dbItem)
		self:Serialize_Item(dbItem)
		self:Serialize_Equip(dbItem)
	end

	method void Serialize_Item(table dbItem)
		local strs = {}
		table.insert(strs, self.GUID)
		table.insert(strs, tostring(self.ItemId))
		table.insert(strs, tostring(self.Count))
		table.insert(strs, tostring(self.EndDateMinute))
		table.insert(strs, tostring(self.CreateDateTimeSec))
		if self.Lock then
			table.insert(strs, "1")
		else
			table.insert(strs, "0")
		end
		
		local str = table.concat(strs, ',')
		dbItem['S'] = str
	end

	method void Serialize_Equip(table dbItem)
		if self.ItemGearStruct == nil then
			return
		end
		
		---@type ItemGearStruct
		local itemGearStruct = self.ItemGearStruct
		itemGearStruct:Serialize(dbItem)
	end

	method ItemStruct Clone()
		local cloneStruct = ItemStruct()
		cloneStruct:CopyFrom(self)
		
		return cloneStruct
	end

	method string GetLogString()
		local dbItem = {}
		self:Serialize(dbItem)
		
		local logStr = ""
		if not _Util:IsNilorEmptyTable(dbItem) then
			logStr = _HttpService:JSONEncode(dbItem)
		end
		
		return logStr
	end

	method ItemGearStruct GetGearStruct()
		return self.ItemGearStruct
	end

	method ItemData GetItemData()
		return _ItemDataLogic:GetData(self.ItemId)
	end

	method string GetItemName()
		local data = self:GetItemData()
		if data == nil then
			return nil
		end
		
		return data.Name
	end

	method ItemGearData GetGearData()
		local itemData = _ItemDataLogic:GetData(self.ItemId)
		if itemData == nil then
			return nil
		end
		
		return itemData.GearData
	end

	method boolean IsAttached()
		local itemData = self:GetItemData(self.ItemId)
		if itemData == nil or itemData.Category ~= _ItemCategoryEnum.Gear then
			return false
		end
		
		---@type ItemGearStruct
		local itemGearStruct = self.ItemGearStruct
		if itemGearStruct == nil then
			return false
		end
		
		return itemGearStruct.IsAttached
	end

	method boolean IsExpired()
		if self.EndDateMinute == 0 then
			return false
		end
		
		local marginElapsed = 59000
		local endDateElapsed = math.floor(self.EndDateMinute * 60 * 1000)
		local curElapsed = _DateTimeLogic:GetTimeElapsed()
		if curElapsed < endDateElapsed + marginElapsed then
			return false
		end
		
		return true
	end

	method boolean IsExpiredWithElapsed(integer utcElapsed)
		if self.EndDateMinute == 0 then
			return false
		end
		
		local marginElapsed = 59000
		local endDateElapsed = math.floor(self.EndDateMinute * 60 * 1000)
		if utcElapsed < endDateElapsed + marginElapsed then
			return false
		end
		
		return true
	end

	method boolean CanMergeItemCreateParam(ItemCreateParamStruct param)
		return self:CanMergeItem(param.ItemId, param.EndDateMinute)
	end

	method boolean CanMergeItem(integer itemId, integer endDateMinute)
		if self.ItemId ~= itemId then
			return false
		end
		
		if self.EndDateMinute ~= endDateMinute then
			return false
		end
		
		return true
	end

	method integer CanDiscardItem()
		local itemData = _ItemDataLogic:GetData(self.ItemId)
		if itemData == nil then
			return _ErrorCodeEnum.Item_InvalidData
		end
		
		if not itemData.CanDiscard then
			return _ErrorCodeEnum.Item_CannotDiscard
		end
		
		if self.Lock then
			return _ErrorCodeEnum.Item_Locked
		end
		
		if self:IsAttached() then
			return _ErrorCodeEnum.Item_Attached
		end
		
		return _ErrorCodeEnum.Success
	end

	method integer GetGradeEnum()
		local s = self:GetGearStruct()
		if s == nil then
			return 0
		end
		
		return s.Grade
	end

end