{
  "Id": "",
  "GameId": "",
  "EntryKey": "scriptfile://2c1e7f62-f979-4ac3-a97e-fef91a49123b",
  "ContentType": "x-mod/scriptfile",
  "Content": "",
  "Usage": 0,
  "UsePublish": 1,
  "UseService": 0,
  "CoreVersion": "1.25.0.0",
  "StudioVersion": "0.1.0.0",
  "DynamicLoading": 0,
  "ContentProto": {
    "Use": "Json",
    "Json": {
      "Name": "ReadMe_Shop",
      "Id": "2c1e7f62-f979-4ac3-a97e-fef91a49123b",
      "Script": "--[[\nðŸ“œ Shop System\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n[Overview]\n\nThis package provides an in-game shop system.\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n[Features]\n\nâ–  Shop System\n- Handles item purchases and transactions\n- Manages currency validation, purchase execution, and success/failure callbacks\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n[Methods & Events]\n\n[PlayerShop]\n- PurchaseShopItem(shopId, count) : Attempts to purchase a shop item\n\n[Event Callbacks]\n- onCurrencyValidate : Currency validation logic\n- onPurchase : Purchase execution logic\n- onPurchaseSuccess : Handles successful purchases\n- onPurchaseFailed : Handles failed purchases (with reason)\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n[Custom Callbacks]\n\n-- Currency validation callback\nplayerShop.onCurrencyValidate(amount)\n- amount : Amount of currency to validate\n- return true/false : Whether the player has enough currency\n\n-- Purchase execution callback\nplayerShop.onPurchase(shopId, count)\n- shopId : ID of the shop item to purchase\n- count : Quantity to purchase\n- return true/false : Whether the purchase succeeded\n\n-- Purchase success callback\nplayerShop.onPurchaseSuccess(shopId, count)\n- shopId : ID of the purchased shop item\n- count : Quantity purchased\n\n-- Purchase failure callback\nplayerShop.onPurchaseFailed(shopId, count, reason)\n- shopId : ID of the shop item attempted to purchase\n- count : Quantity attempted\n- reason : Reason for failure (e.g. insufficient funds, item not found)\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n[Data Structure]\n\nShop data is managed through `ShopDataSetLogic` and follows the structure below:\n\nShopData {\n    ShopItemId : integer,      -- Unique identifier for the shop item\n    Name : string,             -- Display name of the shop item shown in the UI\n    Desc : string,             -- Description text explaining the shop item's details\n    Price : integer,           -- Purchase price in the game's currency\n    IconRUID : string,         -- Resource ID for the icon representing the shop item\n    RewardItemId : integer,     -- Identifier of the item that will be rewarded upon purchase\n    RewardItemCount : integer, -- Quantity of reward items given per purchase\n    PurchaseLimit : integer,   -- Maximum times a player can purchase this item (0 = unlimited)\n    StartDate : integer,       -- Unix timestamp (UTC) indicating when the item becomes available\n    EndDate : integer          -- Unix timestamp (UTC) after which the item is no longer purchasable\n}\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n[Requirements]\n\n- The `PlayerShop` component must be added to the player entity.\n- Callback functions and purchase logic must be connected.\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n[Recommendation]\n- It is recommended to set PlayerEntityAuthorityCheck to true in WorldConfig.\n- If this setting is false, the server function is exposed to all clients, which may lead to security vulnerabilities.\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n[Examples & Samples]\n\nYou can test the shop system using the provided samples:\n- Press K to open the sample shop.\n- Press L to open the GM Tool.\n- The `PlayerDBManager` component must be added to the player entity.\n- The `PlayerData` component must be added to the player entity.\n- The `PlayerInventory` component must be added to the player entity.\n- In the GMTool, values are applied only after pressing Enter.\n\nâ€» For implementation details, refer to the sample scripts:\n- Shop/Sample/ShopSampleLogic\n- Shop/Sample/PlayerDBManager\n- Shop/Sample/PlayerData\n- Shop/Sample/PlayerInventory\n- Shop/Sample/UI/UIShop\n- Shop/Sample/UI/UIShopItem\n- Shop/Sample/UI/UIShop_Purchase\n- Shop/Sample/UI/Model_UIGMShopTool\n- Shop/Sample/UI/UIGMShopTool\n- Shop/Sample/UI/UIGMShopTool_Page\n- Shop/Sample/UI/UIGMShopTool_Item\n]]\n",
      "ModifyTime": "09/30/2025 21:16:57"
    }
  }
}